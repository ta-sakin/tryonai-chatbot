Create a chatbot like Intercom that can be added to any website including website made with wordpress, shopify or any ecommerce site very easily. the owner of the ecommerce store will basically generate some app_id and get some embed link to add to their site so need an portal for that as well where the client can login/register and add all the info to get the steps to add the chatbot to their site.

The chatbot lets users virtually try on clothes. the goal is to wheneveer user visits any website if they want to tryon some cloth they can do it via chatbot if the chatbot is added to that site. 
user uploads their full photo, then user adds a photo/link of cloth then using gemini llm it generates tryon image.i've created the frontend like the image. use typescript, react with vite to create the chatbot and backend with express here is the express backend code to image. 

import { GoogleGenAI, Modality } from "@google/genai"; 
const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY }); router.post("/try-on", async (req, res) => { const { userImage, clothingImage } = req.body; if (!userImage || !clothingImage) { return res.status(400).json({ error: "Missing images" }); } try { // Extract base64 and mimeType from data URLs const parseBase64Image = (dataUrl) => { const [meta, base64Data] = dataUrl.split(","); const mimeType = meta.match(/data:(.*);base64/)[1]; return { mimeType, base64Data }; }; const { mimeType: userMimeType, base64Data: userBase64 } = parseBase64Image(userImage); const { mimeType: clothingMimeType, base64Data: clothingBase64 } = parseBase64Image(clothingImage); const response = await ai.models.generateContent({ model: "gemini-2.0-flash-exp-image-generation", contents: [ { text: "Overlay the clothing image onto the person image realistically, showing the person wearing the clothes. First one is the person image and second is the cloth image. Use the person image as it is as the human body only to wear cloth image.", }, { // text: "user image", inlineData: { mimeType: userMimeType, data: userBase64, }, }, { // text: "cloth's image", inlineData: { mimeType: clothingMimeType, data: clothingBase64, }, }, ], config: { responseModalities: [Modality.TEXT, Modality.IMAGE], }, }); console.log("response", response); const parts = response.candidates?.[0]?.content?.parts || []; const imagePart = parts.find((part) => part.inlineData); if (!imagePart) { throw new Error("No image generated"); } console.log("imagePart", imagePart); const generatedBase64 = imagePart.inlineData.data; console.log("generatedBase64", generatedBase64); // Send back the generated image as base64 res.json({ image: `data:image/png;base64,${generatedBase64}` }); } catch (error) { console.error("Error generating try-on image:", error); res.status(500).json({ error: "Failed to generate try-on image" }); } });